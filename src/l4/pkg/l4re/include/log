// -*- Mode: C++ -*-
// vim:ft=cpp
/**
 * \file
 * \brief   Log interface
 */
/*
 * (c) 2008-2009 Adam Lackorzynski <adam@os.inf.tu-dresden.de>,
 *               Alexander Warg <warg@os.inf.tu-dresden.de>
 *     economic rights: Technische Universit√§t Dresden (Germany)
 *
 * This file is part of TUD:OS and distributed under the terms of the
 * GNU General Public License 2.
 * Please see the COPYING-GPL-2 file for details.
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */
#pragma once

#include <l4/sys/vcon>

namespace L4Re {

/**
 * \defgroup api_l4re_log Logging interface
 * \ingroup api_l4re
 * \brief Interface for log output.
 *
 * The logging interface provides a facility sending log output.
 * One purpose of the interface is to serialize the output an provide
 * the possibility to tag output sent to a specific log object.
 */
/**
 * \brief Log interface class
 * \ingroup api_l4re_log
 */
class L4_EXPORT Log : public L4::Kobject_t<Log, L4::Vcon, L4_PROTO_LOG>
{
  L4_KOBJECT(Log)

public:

  /**
   * \brief Print string with length len, NULL characters don't matter
   *
   * \param string     string to print
   * \param len        length of string
   */
  void printn(char const *string, int len) const throw();

  /**
   * \brief Print NULL-terminated string
   *
   * \param string     string to print
   */
  void print(char const *string) const throw();
};
}
