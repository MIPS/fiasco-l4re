// vi:ft=cpp
/**
 * \file
 * \brief Interrupt functionality
 * \ingroup l4_api
 */
/*
 * (c) 2008-2009 Adam Lackorzynski <adam@os.inf.tu-dresden.de>,
 *               Alexander Warg <warg@os.inf.tu-dresden.de>
 *     economic rights: Technische Universit√§t Dresden (Germany)
 *
 * This file is part of TUD:OS and distributed under the terms of the
 * GNU General Public License 2.
 * Please see the COPYING-GPL-2 file for details.
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */

#pragma once

#include <l4/sys/icu.h>
#include <l4/sys/irq.h>
#include <l4/sys/capability>

namespace L4 {
namespace Protocol { enum { Icu = L4_PROTO_IRQ }; }
namespace Protocol { enum { Irq = L4_PROTO_IRQ }; }

class Irq_eio : public Kobject_t<Irq_eio, Kobject, L4_PROTO_IRQ>
{
  L4_KOBJECT_DISABLE_COPY(Irq_eio)

public:
  l4_msgtag_t unmask(unsigned irqnum, l4_umword_t *label, l4_timeout_t to,
                     l4_utcb_t *utcb = l4_utcb()) throw()
  { return l4_icu_control_u(cap(), irqnum, L4_ICU_CTL_UNMASK, label, to, utcb); }
};

/**
 * \brief C++ version of an L4 IRQ.
 * \ingroup l4_irq_api
 *
 * <c>\#include <l4/sys/irq></c>
 *
 * \see \ref l4_irq_api for an overview and C bindings.
 */
class Irq : public Kobject_t<Irq, Irq_eio, L4_PROTO_IRQ>
{
  L4_KOBJECT(Irq);

public:

  /**
   * \copydoc l4_irq_attach()
   * \note \a irq is the implicit \a this pointer.
   */
  l4_msgtag_t attach(l4_umword_t label, Cap<Thread> const &thread,
                     l4_utcb_t *utcb = l4_utcb()) throw()
  { return l4_irq_attach_u(cap(), label, thread.cap(), utcb); }

  /**
   * \copydoc l4_irq_chain()
   * \note \a irq is the implicit \a this pointer.
   */
  l4_msgtag_t chain(l4_umword_t label, Cap<Irq> const &slave,
                    l4_utcb_t *utcb = l4_utcb()) throw()
  { return l4_irq_chain_u(cap(), label, slave.cap(), utcb); }

  /**
   * \copydoc l4_irq_detach()
   * \note \a irq is the implicit \a this pointer.
   */
  l4_msgtag_t detach(l4_utcb_t *utcb = l4_utcb()) throw()
  { return l4_irq_detach_u(cap(), utcb); }


  /**
   * \copydoc l4_irq_receive()
   * \note \a irq is the implicit \a this pointer.
   */
  l4_msgtag_t receive(l4_timeout_t to = L4_IPC_NEVER,
                      l4_utcb_t *utcb = l4_utcb()) throw()
  { return l4_irq_receive_u(cap(), to, utcb); }

  /**
   * \copydoc l4_irq_wait()
   * \note \a irq is the implicit \a this pointer.
   */
  l4_msgtag_t wait(l4_umword_t *label, l4_timeout_t to = L4_IPC_NEVER,
                   l4_utcb_t *utcb = l4_utcb()) throw()
  { return l4_irq_wait_u(cap(), label, to, utcb); }

  /**
   * \copydoc l4_irq_unmask()
   * \note \a irq is the implicit \a this pointer.
   */
  l4_msgtag_t unmask(l4_utcb_t *utcb = l4_utcb()) throw()
  { return l4_irq_unmask_u(cap(), utcb); }

  /**
   * \copydoc l4_irq_trigger()
   * \note \a irq is the implicit \a this pointer.
   */
  l4_msgtag_t trigger(l4_utcb_t *utcb = l4_utcb()) throw()
  { return l4_irq_trigger_u(cap(), utcb); }

};


/**
 * \brief C++ version of an interrupt controller.
 * \ingroup l4_icu_api
 *
 * <c>\#include <l4/sys/icu></c>
 *
 * \see \ref l4_icu_api for an overview and C bindings.
 */
class Icu : public Kobject_t<Icu, Irq_eio, L4_PROTO_IRQ>
{
  L4_KOBJECT(Icu);

public:
  enum Mode
  {
    F_none         = L4_IRQ_F_NONE,
    F_level_high   = L4_IRQ_F_LEVEL_HIGH,
    F_level_low    = L4_IRQ_F_LEVEL_LOW,
    F_pos_edge     = L4_IRQ_F_POS_EDGE,
    F_neg_edge     = L4_IRQ_F_NEG_EDGE,
    F_both_edge    = L4_IRQ_F_BOTH_EDGE,
    F_mask         = L4_IRQ_F_MASK,

    F_set_wakeup   = L4_IRQ_F_SET_WAKEUP,
    F_clear_wakeup = L4_IRQ_F_CLEAR_WAKEUP,
  };

  enum Flags
  {
    F_msi = L4_ICU_FLAG_MSI
  };

  /**
   * \brief Info for an ICU.
   * \ingroup l4_icu_api
   *
   * This class adds access functions.
   * \see l4_icu_info().
   */
  class Info : public l4_icu_info_t
  {
  public:
    bool supports_msi() const { return features & F_msi; }
  };

  /**
   * \copydoc l4_icu_bind()
   * \note \a the icu argument is the implicit \a this pointer.
   */
  l4_msgtag_t bind(unsigned irqnum, L4::Cap<Irq> irq,
                   l4_utcb_t *utcb = l4_utcb()) throw()
  { return l4_icu_bind_u(cap(), irqnum, irq.cap(), utcb); }

  /**
   * \copydoc l4_icu_unbind()
   * \note \a the icu argument is the implicit \a this pointer.
   */
  l4_msgtag_t unbind(unsigned irqnum, L4::Cap<Irq> irq,
                     l4_utcb_t *utcb = l4_utcb()) throw()
  { return l4_icu_unbind_u(cap(), irqnum, irq.cap(), utcb); }

  /**
   * \copydoc l4_icu_info()
   * \note \a the icu argument is the implicit \a this pointer.
   */
  l4_msgtag_t info(l4_icu_info_t *info, l4_utcb_t *utcb = l4_utcb()) throw()
  { return l4_icu_info_u(cap(), info, utcb); }

  /**
   * \copydoc l4_icu_msi_info()
   * \note \a the icu argument is the implicit \a this pointer.
   */
  l4_msgtag_t msi_info(unsigned irqnum, l4_umword_t *msg,
                       l4_utcb_t *utcb = l4_utcb()) throw()
  { return l4_icu_msi_info_u(cap(), irqnum, msg, utcb); }

  /**
   * \internal
   */
  l4_msgtag_t control(unsigned irqnum, unsigned op, l4_umword_t *label,
                      l4_timeout_t to, l4_utcb_t *utcb = l4_utcb()) throw()
  { return l4_icu_control_u(cap(), irqnum, op, label, to, utcb); }

  /**
   * \copydoc l4_icu_mask()
   * \note \a the icu argument is the implicit \a this pointer.
   */
  l4_msgtag_t mask(unsigned irqnum,
                   l4_umword_t *label = 0,
                   l4_timeout_t to = L4_IPC_NEVER,
                   l4_utcb_t *utcb = l4_utcb()) throw()
  { return l4_icu_mask_u(cap(), irqnum, label, to, utcb); }

  /**
   * \copydoc l4_icu_unmask()
   * \note \a the icu argument is the implicit \a this pointer.
   */
  l4_msgtag_t unmask(unsigned irqnum,
                     l4_umword_t *label = 0,
                     l4_timeout_t to = L4_IPC_NEVER,
                     l4_utcb_t *utcb = l4_utcb()) throw()
  { return l4_icu_unmask_u(cap(), irqnum, label, to, utcb); }

  /**
   * \copydoc l4_icu_set_mode()
   * \note \a the icu argument is the implicit \a this pointer.
   */
  l4_msgtag_t set_mode(unsigned irqnum, l4_umword_t mode,
                       l4_utcb_t *utcb = l4_utcb()) throw()
  { return l4_icu_set_mode_u(cap(), irqnum, mode, utcb); }
};

}
