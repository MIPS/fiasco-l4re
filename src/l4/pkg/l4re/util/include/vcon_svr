// vi:ft=cpp
/*
 * (c) 2008-2011 Alexander Warg <warg@os.inf.tu-dresden.de>,
 *               Torsten Frenzel <frenzel@os.inf.tu-dresden.de>
 *               Adam Lackorzysnski <adam@os.inf.tu-dresden.de>
 *     economic rights: Technische Universit√§t Dresden (Germany)
 *
 * This file is part of TUD:OS and distributed under the terms of the
 * GNU General Public License 2.
 * Please see the COPYING-GPL-2 file for details.
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */
#pragma once

#include <l4/cxx/ipc_stream>

namespace L4Re { namespace Util {

/**
 * \brief Console server template class.
 * \ingroup api_l4re_util
 *
 * This template uses vcon_write() and vcon_read() to get and deliver data
 * from the implementor.
 *
 * vcon_read() needs to update the status argument with the
 * L4_vcon_read_stat flags, especially the L4_VCON_READ_STAT_DONE flag
 * to indicate that there's nothing more to read for the other end.
 *
 * vcon_write() gets the live data from the UTCB. Make sure to copy out the
 * data before using the UTCB again.
 *
 * The size parameter of both function is given in bytes.
 */
template< typename SVR >
class Vcon_svr
{
public:

  /**
   * \brief Server dispatch function.
   *
   * \param obj Server object ID to work on.
   * \param ios Input/Output stream.
   *
   * \return error code.
   */
  int dispatch(l4_umword_t obj, L4::Ipc::Iostream &ios);

  unsigned vcon_read(char *buf, unsigned size) throw();
  void vcon_write(const char *buf, unsigned size) throw();
  int vcon_set_attr(l4_vcon_attr_t const *) throw()
  { return -L4_EOK; }
  int vcon_get_attr(l4_vcon_attr_t *attr) throw()
  {
    attr->l_flags = attr->o_flags = attr->i_flags = 0;
    return -L4_EOK;
  }

private:
  SVR const *this_vcon() const { return static_cast<SVR const *>(this); }
  SVR *this_vcon() { return static_cast<SVR *>(this); }
};

template< typename SVR >
int
Vcon_svr<SVR>::dispatch(l4_umword_t, L4::Ipc::Iostream &ios)
{
  l4_msgtag_t tag;
  ios >> tag;

  if (tag.label() != L4_PROTO_LOG)
    return -L4_EBADPROTO;

  L4::Opcode op;
  ios >> op;

  switch (op)
    {
    case L4_VCON_WRITE_OP:
        {
          unsigned long size = 0;
          char *buf = 0;
          ios >> L4::Ipc::buf_in(buf, size);
          this_vcon()->vcon_write(buf, size);
          return -L4_ENOREPLY;
        }
    case L4_VCON_SET_ATTR_OP:
        {
	  l4_vcon_attr_t a;
	  ios.get(a);
	  return this_vcon()->vcon_set_attr(&a);
	}
    case L4_VCON_GET_ATTR_OP:
        {
	  l4_vcon_attr_t a;
	  int e = this_vcon()->vcon_get_attr(&a);
	  if (e == L4_EOK)
	    {
	      ios << l4_umword_t(0);
	      ios.put(a);
	    }
	  return e;
	}
    default:
      break;
    }

  unsigned size = op >> 16;

  if (size > (L4_UTCB_GENERIC_DATA_SIZE - 1) * sizeof(l4_utcb_mr()->mr[0]))
    size = (L4_UTCB_GENERIC_DATA_SIZE - 1) * sizeof(l4_utcb_mr()->mr[0]);

  char buf[size];
  // Hmm, could we avoid the double copy here?
  l4_umword_t v = this_vcon()->vcon_read(buf, size);
  unsigned bytes = v & L4_VCON_READ_SIZE_MASK;

  if (bytes < size)
    v |= L4_VCON_READ_STAT_DONE;

  ios.put(v);
  ios.put(buf, bytes);

  return -L4_EOK;
}

}}
