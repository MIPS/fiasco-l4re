
SRC_CC11 += \
  chrono.cc \
  condition_variable.cc \
  functexcept.cc \
  fstream-inst.cc \
  limits_c++0x.cc \
  hash_c++0x.cc \
  hashtable_c++0x.cc \
  mutex.cc \
  system_error.cc \
  string-inst.cc \
  thread.cc \
  wstring-inst.cc \

SRC_CC += \
  allocator-inst.cc \
  bitmap_allocator.cc \
  codecvt.cc \
  compatibility.cc \
  complex_io.cc \
  concept-inst.cc \
  ctype.cc \
  debug.cc \
  debug_list.cc \
  ext-inst.cc \
  globals_io.cc \
  ios.cc \
  ios_failure.cc \
  ios_init.cc \
  ios-inst.cc \
  ios_locale.cc \
  iostream-inst.cc \
  istream.cc \
  istream-inst.cc \
  limits.cc \
  locale.cc \
  locale_facets.cc \
  locale_init.cc \
  locale-inst.cc \
  localename.cc \
  misc-inst.cc \
  mt_allocator.cc \
  ostream-inst.cc \
  parallel_list.cc \
  parallel_settings.cc \
  pool_allocator.cc \
  sstream-inst.cc \
  stdexcept.cc \
  streambuf.cc \
  streambuf-inst.cc \
  tree.cc \
  wlocale-inst.cc \
  basic_file_stdio.cc \
  c_locale.cc \
  ctype_members.cc \
  time_members.cc \
  monetary_members.cc \
  messages_members.cc \
  numeric_members.cc \
  codecvt_members.cc \
  collate_members.cc \
  valarray-inst.cc \

SRC_CC       += $(if $(GCC_HAS_ATOMICS),,atomicity.cc)
SRC_CC       += $(SRC_CC11)

$(foreach t,$(SRC_CC11),$(eval CXXFLAGS_$(t) += -std=gnu++0x))

$(OBJ_DIR)/atomicity.cc: $(call CPU_file,atomicity_mutex/atomicity.h)
	$(LN) -sf $< $@

