// vim:ft=cpp
/*
 * (c) 2008-2009 Alexander Warg <warg@os.inf.tu-dresden.de>
 *     economic rights: Technische Universit√§t Dresden (Germany)
 *
 * This file is part of TUD:OS and distributed under the terms of the
 * GNU General Public License 2.
 * Please see the COPYING-GPL-2 file for details.
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */

#pragma once

namespace cxx {

template< typename T >
struct Default_ref_counter
{
  void h_drop_ref(T *p) throw()
  {
    if (p->remove_ref() == 0)
      delete p;
  }

  void h_take_ref(T *p) throw()
  {
    p->add_ref();
  }
};

struct Ref_ptr_base
{
  enum Default_value
  { Nil = 0 };
};

template<typename T, template< typename X > class CNT = Default_ref_counter>
class Weak_ptr;

template <
  typename T = void,
  template< typename X > class CNT = Default_ref_counter
>
class Ref_ptr : public Ref_ptr_base, private CNT<T>
{
private:
  struct Null_type;
  typedef Weak_ptr<T, CNT> Wp;

public:
  Ref_ptr() throw() : _p(0) {}

  Ref_ptr(Ref_ptr_base::Default_value v) : _p((T*)v) {}

  Ref_ptr(Wp const &o) throw() : _p(o.ptr())
  { __take_ref(); }

  explicit Ref_ptr(T *o) throw() : _p(o)
  { __take_ref(); }

  /** The couterpart to release (does not create a new reference).
   */
  Ref_ptr(T *o, bool) throw() : _p(o) {}

  T *get() const throw()
  {
    return _p;
  }

  T *ptr() const throw()
  {
    return _p;
  }

  T *release() throw()
  {
    T *p = _p;
    _p = 0;
    return p;
  }

  ~Ref_ptr() throw()
  { __drop_ref(); }

  template<typename OT>
  Ref_ptr(Ref_ptr<OT, CNT> const &o) throw()
  {
    _p = o.ptr();
    __take_ref();
  }

  Ref_ptr(Ref_ptr<T> const &o) throw()
  {
    _p = o._p;
    __take_ref();
  }

  template< typename OT >
  void operator = (Ref_ptr<OT> const &o) throw()
  {
    __drop_ref();
    _p = o.ptr();
    __take_ref();
  }

  void operator = (Ref_ptr<T> const &o) throw()
  {
    if (&o == this)
      return;

    __drop_ref();
    _p = o._p;
    __take_ref();
  }

  void operator = (T *o) throw()
  {
    __drop_ref();
    _p = o;
    __take_ref();
  }

  T *operator -> () const throw ()
  { return _p; }

  operator Null_type const * () const throw()
  { return reinterpret_cast<Null_type const*>(_p); }

private:
  void __drop_ref() throw()
  {
    if (_p)
      this->h_drop_ref(_p);
  }

  void __take_ref() throw()
  {
    if (_p)
      this->h_take_ref(_p);
  }

  T *_p;
};


template<typename T, template< typename X > class CNT>
class Weak_ptr
{
private:
  struct Null_type;
  typedef Ref_ptr<T, CNT> Rp;

public:
  Weak_ptr() throw() {}
  Weak_ptr(Rp const &o) throw() : _p(o.ptr()) {}
  explicit Weak_ptr(T *o) throw() : _p(o) {}

  T *get() const throw() { return _p; }
  T *ptr() const throw() { return _p; }

  T *operator -> () const throw () { return _p; }
  operator Null_type const * () const throw()
  { return reinterpret_cast<Null_type const*>(_p); }

private:
  T *_p;
};

template<typename OT, typename T> inline
Ref_ptr<OT> ref_ptr_static_cast(Ref_ptr<T> const &o)
{ return ref_ptr(static_cast<OT*>(o.ptr())); }

template< typename T >
inline Ref_ptr<T> ref_ptr(T *t)
{ return Ref_ptr<T>(t); }

template< typename T >
inline Weak_ptr<T> weak_ptr(T *t)
{ return Weak_ptr<T>(t); }


class Ref_obj
{
private:
  mutable int _ref_cnt;

public:
  Ref_obj() : _ref_cnt(0)  {}
  void add_ref() const throw() { ++_ref_cnt; }
  int remove_ref() const throw() { return --_ref_cnt; }
};

}
