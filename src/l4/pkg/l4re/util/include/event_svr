// vi:ft=cpp
/*
 * (c) 2008-2009 Adam Lackorzynski <adam@os.inf.tu-dresden.de>,
 *               Alexander Warg <warg@os.inf.tu-dresden.de>
 *     economic rights: Technische Universit√§t Dresden (Germany)
 *
 * This file is part of TUD:OS and distributed under the terms of the
 * GNU General Public License 2.
 * Please see the COPYING-GPL-2 file for details.
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */

#pragma once

#include <l4/re/event_enums.h>
#include <l4/re/event>
#include <l4/re/event-sys.h>
#include <l4/re/util/icu_svr>

namespace L4Re { namespace Util {

template< typename SVR >
class Event_svr : public Icu_cap_array_svr<SVR>
{
private:
  typedef Icu_cap_array_svr<SVR> Icu_svr;

protected:
  L4::Cap<L4Re::Dataspace> _ds;
  typename Icu_svr::Irq _irq;

public:
  Event_svr() : Icu_svr(1, &_irq) {}
  int dispatch(l4_umword_t obj, L4::Ipc::Iostream &ios);
  int get_num_streams() const { return 0; }
  int get_stream_info(int, L4Re::Event_stream_info *)
  { return -L4_EINVAL; }
  int get_stream_info_for_id(l4_umword_t, L4Re::Event_stream_info *)
  { return -L4_EINVAL; }
  int get_axis_info(l4_umword_t, unsigned /*naxes*/, unsigned * /*axes*/,
                    L4Re::Event_absinfo *)
  { return -L4_EINVAL; }
  int get_stream_state_for_id(l4_umword_t, L4Re::Event_stream_state *)
  { return -L4_EINVAL; }
};

template<typename SVR>
inline
int
Event_svr<SVR>::dispatch(l4_umword_t obj, L4::Ipc::Iostream &ios)
{
  l4_msgtag_t tag;
  ios >> tag;

  if (tag.label() == L4_PROTO_IRQ)
    return Icu_svr::dispatch(obj, ios);
  else if (tag.label() != L4Re::Protocol::Event)
    return -L4_EBADPROTO;

  L4::Opcode op;
  ios >> op;
  switch (op)
    {
    case L4Re::Event_::Get:
      static_cast<SVR*>(this)->reset_event_buffer();
      ios << _ds;
      return L4_EOK;
    case L4Re::Event_::Get_num_streams:
      ios << (l4_umword_t)static_cast<SVR*>(this)->get_num_streams();
      return L4_EOK;
    case L4Re::Event_::Get_stream_info:
        {
          int idx;
          ios >> idx;
          Event_stream_info si;
          int r = static_cast<SVR*>(this)->get_stream_info(idx, &si);
	  ios.put(si);
	  return r;
        }
    case L4Re::Event_::Get_stream_info_for_id:
        {
          l4_umword_t stream_id;
          ios >> stream_id;
          Event_stream_info si;
          int r = static_cast<SVR*>(this)->get_stream_info_for_id(stream_id, &si);
	  ios.put(si);
	  return r;
        }
    case L4Re::Event_::Get_axis_info:
	{
	  l4_umword_t stream_id;
	  long unsigned naxes = L4RE_ABS_MAX;
	  unsigned axes[L4RE_ABS_MAX];
	  ios >> stream_id >> L4::Ipc::buf_cp_in(axes, naxes);

	  Event_absinfo infos[naxes];
	  int r = static_cast<SVR*>(this)->get_axis_info(stream_id, naxes, axes, infos);
	  if (r < 0)
	    return r;

	  ios << L4::Ipc::buf_cp_out(infos, naxes);
	  return r;
	}
    case L4Re::Event_::Get_stream_state_for_id:
        {
          l4_umword_t stream_id;
          ios >> stream_id;
          Event_stream_state si;
          int r = static_cast<SVR*>(this)->get_stream_state_for_id(stream_id, &si);
          ios.put(si);
          return r;
        }
    default:
      return -L4_ENOSYS;
    }
}

}}
