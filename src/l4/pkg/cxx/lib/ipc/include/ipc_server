// vi:ft=cpp
/**
 * \file
 * \brief IPC server loop
 */
/*
 * (c) 2008-2009 Adam Lackorzynski <adam@os.inf.tu-dresden.de>,
 *               Alexander Warg <warg@os.inf.tu-dresden.de>,
 *               Torsten Frenzel <frenzel@os.inf.tu-dresden.de>
 *     economic rights: Technische Universit√§t Dresden (Germany)
 *
 * This file is part of TUD:OS and distributed under the terms of the
 * GNU General Public License 2.
 * Please see the COPYING-GPL-2 file for details.
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */

#pragma once

#include <l4/sys/capability>
#include <l4/sys/err.h>
#include <l4/cxx/ipc_stream>
#include <l4/cxx/type_traits>
#include <l4/cxx/exceptions>

namespace L4 {

/**
 * \brief Helper classes for L4::Server instantiation.
 */
namespace Ipc_svr {

/**
 * \brief Reply mode for server loop.
 *
 * The reply mode specifies if the server loop shall do a compound reply
 * and wait operation (#Reply_compund), which is the most performant
 * method.  Note, setup_wait() is called before the reply.  The other
 * way is to call reply and wait separately and call setup_wait in between.
 *
 * The actual mode is determined by the return value of the before_reply()
 * hook in the LOOP_HOOKS of L4::Server.
 */
enum Reply_mode
{
  Reply_compound, ///< Server shall use a compound reply and wait (fast).
  Reply_separate  ///< Server shall call reply and wait separately.
};

/**
 * \brief Mix in for LOOP_HOOKS to ignore IPC errors.
 */
struct Ignore_errors
{ static void error(l4_msgtag_t, L4::Ipc::Iostream const &) {} };

/**
 * \brief Mix in for LOOP_HOOKS to use a 0 send and a infinite receive timeout.
 */
struct Default_timeout
{ static l4_timeout_t timeout() { return L4_IPC_SEND_TIMEOUT_0; } };

/**
 * \brief Mix in for LOOP_HOOKS to always use compound reply and wait.
 */
struct Compound_reply
{
  static Reply_mode before_reply(long, L4::Ipc::Ostream const &)
  { return Reply_compound; }
};

/**
 * \brief Mix in for LOOP_HOOKS for setup_wait no op.
 */
struct Default_setup_wait
{ static void setup_wait(L4::Ipc::Istream &, Reply_mode) {} };

/**
 * \brief Default LOOP_HOOKS.
 *
 * Combination of Ignore_errors, Default_timeout, Compound_reply,
 * and Default_setup_wait.
 */
struct Default_loop_hooks :
  public Ignore_errors, public Default_timeout, public Compound_reply,
  public Default_setup_wait
{};


template< typename HOOKS >
class Timed_work : public HOOKS
{
protected:
  l4_cpu_time_t _timeout;

public:
  Timed_work()
  : _timeout(HOOKS::next_timeout(HOOKS::current_time())) {}

  l4_timeout_t timeout()
  {
    return l4_timeout(L4_IPC_TIMEOUT_0,
                      l4_timeout_abs(_timeout, this->timeout_br()));
  }

  void setup_wait(L4::Ipc::Istream &s, Reply_mode mode)
  {
    if (_timeout <= this->current_time()
        && mode == Reply_separate)
      {
	this->work();
        _timeout = this->next_timeout(_timeout);
      }
    HOOKS::setup_wait(s, mode);
  }

  Reply_mode before_reply(long, L4::Ipc::Ostream const &)
  {
    if (_timeout <= this->current_time())
      return Reply_separate;
    return Reply_compound;
  }
};

template< typename R >
struct Direct_dispatch
{
  R &r;
  Direct_dispatch(R &r) : r(r) {}
  long operator () (l4_umword_t obj, L4::Ipc::Iostream &ios)
  { return r.dispatch(obj, ios); }
};

template< typename R >
struct Direct_dispatch<R*>
{
  R *r;
  Direct_dispatch(R *r) : r(r) {}
  long operator () (l4_umword_t obj, L4::Ipc::Iostream &ios)
  { return r->dispatch(obj, ios); }
};

template< typename R, typename Exc = L4::Runtime_error>
struct Exc_dispatch : private Direct_dispatch<R>
{
  Exc_dispatch(R r) : Direct_dispatch<R>(r) {}
  long operator () (l4_umword_t obj, L4::Ipc::Iostream &ios)
  {
    try
      {
        return Direct_dispatch<R>::operator () (obj, ios);
      }
    catch (Exc &e)
      {
        return e.err_no();
      }
  }
};

}

/**
 * \brief Basic server loop for handling client requests.
 * \ingroup client_server_ipc
 * \param LOOP_HOOKS the server inherits from LOOP_HOOKS and calls the
 *        hooks defined in LOOP_HOOKS in the server loop.
 *        See Ipc_svr::Default_loop_hooks, Ipc_svr::Ignore_errors,
 *        Ipc_svr::Default_timeout, Ipc_svr::Compound_reply, and
 *        Ipc_svr::Default_setup_wait.
 *
 * This is basically a simple server loop that uses a single message buffer
 * for receiving requests and sending replies. The dispatcher determines
 * how incoming messages are handled.
 */
template< typename LOOP_HOOKS = Ipc_svr::Default_loop_hooks >
class Server :
  public LOOP_HOOKS
{
public:
  /**
   * \brief Initializes the server loop and its underlying Ipc::Iostream.
   * \param utcb The UTCB of the thread running the server loop.
   */
  explicit Server(l4_utcb_t *utcb) : _iostream(utcb) {}

  /**
   * \brief The server loop.
   *
   * This function usually never returns, it waits for
   * incoming messages calls the dispatcher, sends a reply and waits again.
   */
  template< typename DISPATCH >
  inline L4_NORETURN void internal_loop(DISPATCH dispatch);

  template< typename R >
  inline L4_NORETURN void loop_noexc(R r)
  { internal_loop(Ipc_svr::Direct_dispatch<R>(r)); }

  template< typename R >
  inline L4_NORETURN void loop(R r)
  { internal_loop(Ipc_svr::Exc_dispatch<R>(r)); }

protected:
  inline l4_msgtag_t reply_n_wait(long reply, l4_umword_t *p);

public:
  Ipc::Iostream _iostream;
};

template< typename L >
inline l4_msgtag_t
Server<L>::reply_n_wait(long reply, l4_umword_t *p)
{
  if (reply != -L4_ENOREPLY)
    {
      Ipc_svr::Reply_mode m = this->before_reply(reply, _iostream);
      if (m == Ipc_svr::Reply_compound)
	{
	  this->setup_wait(_iostream, m);
	  return _iostream.reply_and_wait(p, this->timeout(), reply);
	}
      else
	{
	  l4_msgtag_t res = _iostream.reply(this->timeout(), reply);
	  if (res.has_error())
	    return res;
	}
    }
  this->setup_wait(_iostream, Ipc_svr::Reply_separate);
  return _iostream.wait(p, this->timeout());
}

template< typename L >
template< typename DISPATCH >
inline L4_NORETURN void
Server<L>::internal_loop(DISPATCH dispatch)
{
  l4_msgtag_t res;
  l4_umword_t p;
  long r = -L4_ENOREPLY;

  while (true)
    {
      res = reply_n_wait(r, &p);
      if (res.has_error())
	{
	  this->error(res, _iostream);
	  r = -L4_ENOREPLY;
	  continue;
	}

      _iostream.Ipc::Ostream::reset();
      r = dispatch(p, _iostream);
    }
}




/**
 * \brief Abstract server object to be used with L4::Server and L4::Basic_registry.
 * \ingroup client_server_ipc
 *
 * This server object provides an abstract interface that is used by the
 * L4::Registry_dispatcher model. You can derive subclasses from this
 * interface and implement application specific server objects.
 */
class Server_object
{
private:
  Server_object(Server_object const &);
  Server_object &operator = (Server_object const &);

public:
  Server_object() {}

  /**
   * \brief The abstract handler for client requests to the object.
   * \param obj The object ID used for looking up the object.
   * \param ios The Ipc::Iostream for reading the request and writing the reply.
   * \return #Reply, #No_reply, or #Invalid_opcode.
   *
   * This function must be implemented by application specific server
   * objects. The implementation must unmarshall data from the stream (\a ios)
   * and create a reply by marshalling to the stream (\a ios). For details
   * about the IPC stream see \link ipc_stream IPC stream operators \endlink.
   *
   * \note You need to extract the complete message from the \a ios stream before
   *       inserting any reply data or before doing any function call that may use
   *       the UTCB. Otherwise, the incoming message may get lost.
   */
  virtual int dispatch(unsigned long obj, Ipc::Iostream &ios) = 0;
  virtual ~Server_object() = 0;


  Cap<Kobject> obj_cap() const { return _cap; }
  template< typename T>
  void obj_cap(Cap<T> const &cap) { _cap = cap; }
  void obj_cap(Cap<Kobject> const &cap) { _cap = cap; }

private:
  Cap<Kobject> _cap;
};

inline Server_object::~Server_object() {}

/**
 * \brief This registry returns the corresponding server object
 *        based on the label of an Ipc_gate.
 * \ingroup client_server_ipc
 */
class Basic_registry
{
public:
  /**
   * \brief Get the server object for a Ipc_gate label.
   * \param label The label usually stored in an Ipc_gate.
   * \return A pointer to the Server_object identified the given label.
   */
  typedef Server_object Value;
  static Value *find(l4_umword_t label)
  { return reinterpret_cast<Value*>(label & ~3UL); }

  /**
   * \brief The dispatch function called by the server loop.
   *
   * This function forwards the message to the server object identified by the
   * given \a label.
   *
   * \param label The label used to find the object including the rights bits
   *              of the invoked capability.
   * \param ios The Ipc::Iostream for the request and the reply.
   * \return The return code from the object's dispatch function or -L4_ENOENT
   *         if the object does not exist.
   */
  static int dispatch(l4_umword_t label, L4::Ipc::Iostream &ios)
  {
    Value *o = find(label);

    if (!o)
      return -L4_ENOENT;

    return o->dispatch(label, ios);
  }
};

}
